#ifndef PROJECT_HEADER_JS
#define PROJECT_HEADER_JS

#define NODEBUG

#include <debug.hjs>
#include <stdcomps.hjs>

#define XULNS "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
#define CUSTOMBUTTONS_OVERLAY_SCRIPT_URI "chrome://custombuttons/content/buttonsoverlay.js"

#define CB_MODE_USE_XML_BUTTON_FORMAT 1
#define CB_MODE_SHOW_APPLY_BUTTON 2
#define CB_MODE_DISABLE_INIT_IN_CTDIALOG_GLOBAL 4
#define CB_MODE_USE_CB2_OLD_BUTTON_FORMAT 8
#define CB_MODE_DO_NOT_CLOSE_EDITORS_ON_APPLICATION_CLOSE 16

#define CB_MODE_ENABLE_INIT_IN_CTDIALOG 1
#define CB_MODE_DISABLE_DEFAULT_KEY_BEHAVIOR 2

#define CB_KEYMAP_SERVICE_CID "@xsms.nm.ru/custombuttons/cbkeymap;1"
#define CB_KEYMAP_SERVICE_IID cbIKeyMapService

#define CB_SERVICE_CID "@xsms.nm.ru/custombuttons/cbservice;1"
#define CB_SERVICE_IID cbICustomButtonsService

#define CB_CONTENT_MANAGER_SERVICE_UUID 2f1e1474-f302-4cf6-9437-968e2a68242f
#define CB_CONTENT_MANAGER_SERVICE_CID "@xsms.nm.ru/custombuttons/cbcontentmanager;1"
#define CB_CONTENT_MANAGER_SERVICE_IID cbICBContentManager

#define CB_CONTENT_POLICY_COMPONENT_CID "@xsms.nm.ru/custombuttons/cbcontentpolicy;1"
#define CB_CONTENT_POLICY_COMPONENT_IID cbIContentPolicyComponent

#define CB_NOT_USED_UUID "custombuttons:2c73fe2f-2ed5-432d-9901-a8dbc4961e83"

#define CB_NOTIFICATION_PREFIX "custombuttons:69423527-65a1-4b8f-bd7a-29593fc46d27:"
#define CB_BUTTONEDIT_NOTIFICATION_UUID "custombuttons:69423527-65a1-4b8f-bd7a-29593fc46d27:edit"
#define CB_BUTTONUPDATE_NOTIFICATION_UUID "custombuttons:69423527-65a1-4b8f-bd7a-29593fc46d27:update"
#define CB_BUTTONREMOVE_NOTIFICATION_UUID "custombuttons:69423527-65a1-4b8f-bd7a-29593fc46d27:remove"
#define CB_BUTTONCLONE_NOTIFICATION_UUID "custombuttons:69423527-65a1-4b8f-bd7a-29593fc46d27:clone"
#define CB_BUTTONADDED_NOTIFICATION_UUID "custombuttons:69423527-65a1-4b8f-bd7a-29593fc46d27:added"
#define CB_BUTTONOPEN_NOTIFICATION_UUID "custombuttons:69423527-65a1-4b8f-bd7a-29593fc46d27:open"
#define CB_BUTTONOPENED_NOTIFICATION_UUID "custombuttons:69423527-65a1-4b8f-bd7a-29593fc46d27:opened"
#define CB_NOTIFICATION(NAME) CB_BUTTON##NAME##_NOTIFICATION_UUID

#define CB_BUTTON_PARAMETERS_COMPONENT_CID "@xsms.nm.ru/custombuttons/cbbuttonparameters;1"
#define CB_BUTTON_PARAMETERS_COMPONENT_IID cbIButtonParameters

#define CB_STORAGE_SERVICE_CID "@xsms.nm.ru/custombuttons/cbstorageservice;1"
#define CB_STORAGE_SERVICE_IID cbIStorageService

#define BT(X,Y) (((X) & (Y)) == Y)
#define SET(X,Y) if (!X) X = Y

#define MAKE_DATA_URI(contentType,dataString) "data:" + contentType + ";base64," + btoa (dataString)

#define DEFINE_ATTRIBUTE_GETTER(ATTR_NAME,PROP_NAME,DEFAULT_VALUE,EXPRESSION)  \
PROP_NAME: DEFAULT_VALUE,                            \
get ATTR_NAME ()                                \
{                                        \
  SET (this. PROP_NAME, EXPRESSION);                      \
  return this. PROP_NAME;                            \
}

#define DEFINE_GETTER_TRANSLATE(ATTR_NAME,DEST)                  \
get ATTR_NAME ()                                \
{                                        \
  return DEST. ATTR_NAME;                            \
}

#define DEFINE_SETTER_TRANSLATE(ATTR_NAME,DEST)                  \
set ATTR_NAME (value)                              \
{                                        \
  DEST. ATTR_NAME = value;                          \
}

#define DEFINE_FUNCTION_TRANSLATE(METHOD_NAME,DEST,ARGS...)            \
METHOD_NAME: function (ARGS)                          \
{                                        \
  return DEST. METHOD_NAME (ARGS);                      \
}

#define DEFINE_PROCEDURE_TRANSLATE(METHOD_NAME,DEST,ARGS...)          \
METHOD_NAME: function (ARGS)                          \
{                                        \
  DEST. METHOD_NAME (ARGS);                          \
}

#define DEFINE_STD_CAN_UNLOAD canUnload: function (componentManager) { return true; }

#define DEFINE_STD_GET_CLASS_OBJECT                        \
getClassObject: function (componentManager, cid, iid)              \
{                                        \
    if (!cid. equals (this. CLSID))                        \
        throw NS_ERROR (NO_INTERFACE);                      \
    if (!iid. equals (CI. nsIFactory))                      \
        throw NS_ERROR (NOT_IMPLEMENTED);                    \
    return this. CLASS_FACTORY;                          \
}

#define DEFINE_STD_REGISTER_SELF                        \
FIRST_TIME: true,                                \
registerSelf: function (componentManager, fileSpec, location, type)        \
{                                        \
  if (this. FIRST_TIME)                            \
        this. FIRST_TIME = false;                        \
    else                                    \
        throw NS_ERROR (FACTORY_REGISTER_AGAIN);                \
    componentManager = componentManager. QI (nsIComponentRegistrar);      \
    componentManager. registerFactoryLocation                  \
    (                                      \
        this. CLSID, this. ComponentName,                    \
        this. ContractID, fileSpec,                        \
        location, type                              \
    );                                      \
}

#define DEFINE_STD_UNREGISTER_SELF                        \
unregisterSelf: function (componentManager, location, loaderStr) {}

#define DEFINE_STD_MODULE_INTERFACE                        \
DEFINE_STD_CAN_UNLOAD,                              \
DEFINE_STD_GET_CLASS_OBJECT,                          \
DEFINE_STD_REGISTER_SELF,                            \
DEFINE_STD_UNREGISTER_SELF

#define DEFINE_STD_CLASS_FACTORY(c)                        \
CLASS_FACTORY:                                  \
{                                        \
  QueryInterface: function (iid)                        \
  {                                      \
    if (iid. equals (CI. nsIFactory) || iid. equals (CI. nsISupports))    \
      return this;                            \
    throw NS_ERROR (NO_INTERFACE);                      \
  },                                      \
    createInstance: function (outer, iid)                    \
    {                                      \
        if (outer != null)                            \
            throw NS_ERROR (NO_AGGREGATION);                  \
        return (new c ()). QueryInterface (iid);                \
    }                                      \
}

#define DEFINE_STD_NS_GET_MODULE(module)                    \
function NSGetModule (componentManager, fileSpec)                \
{                                        \
  return module;                                \
}

#define DEFINE_STD_QI(IID)                            \
QueryInterface: function (iid)                          \
{                                        \
  if (!iid. equals (CI. IID) &&                        \
    !iid. equals (CI. nsISupports))                      \
    throw NS_ERROR (NO_INTERFACE);                      \
  return this;                                \
}

#define GET_ELEMENT(id) document. getElementById (id)
#define ELEMENT(id) GET_ELEMENT (id)
#define SET_ATTRIBUTE(elementId,attributeName,attributeValue)          \
ELEMENT (elementId). setAttribute (attributeName, attributeValue)
#define GET_STRING(stringBundleId,stringId)                    \
GET_ELEMENT (stringBundleId). getString (stringId)
#define GET_FORMATTED_STRING(stringBundleId,stringId,args...)          \
GET_ELEMENT (stringBundleId). getFormattedString (stringId, [args])

#define CB_STRING(stringBundleId,stringId,argument)                \
GET_STRING (stringBundleId, stringId). replace (/%s/gi, argument)

#define THROW(message) throw new Error (message);

#define ADD_BUBBLING_EVENT_HANDLER(eventName,action...)              \
window. addEventListener                            \
(                                        \
  eventName,                                  \
  function (event)                              \
  {                                      \
    action;                                  \
  },                                      \
  false                                    \
)

#define ADD_CAPTURING_EVENT_HANDLER(eventName,action...)              \
window. addEventListener                            \
(                                        \
  eventName,                                  \
  function (event)                              \
  {                                      \
    action;                                  \
  },                                      \
  true                                    \
)

#define _SUPER(arguments...)                          \
this. __super. call (this, arguments)

#define SUPER(method,arguments...)                        \
this. __super. prototype. method. apply (this, [arguments])

#define EXTEND(child,parent)                          \
child. prototype. __proto__ = parent. prototype

#define EXTENDS(child,parent)                          \
EXTEND (child, parent);                              \
child. prototype. __super = parent

#define DEFINE_GETTER(PROP_NAME,CLASS_NAME)                    \
get PROP_NAME ()                                \
{                                        \
  return new CLASS_NAME ();                          \
}
#endif
